#pragma checksum "C:\Files\Redat Website\Redat.Website\Redat.Website\Views\Home\RequestMedicalService.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fac788e796a5f08eec97b58aafa1c8a82b3f57b2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_RequestMedicalService), @"mvc.1.0.view", @"/Views/Home/RequestMedicalService.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Files\Redat Website\Redat.Website\Redat.Website\Views\_ViewImports.cshtml"
using Redat.Website;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Files\Redat Website\Redat.Website\Redat.Website\Views\_ViewImports.cshtml"
using Redat.Website.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fac788e796a5f08eec97b58aafa1c8a82b3f57b2", @"/Views/Home/RequestMedicalService.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"626fce3af5893b82d88218e98a8a708fd582a79b", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_RequestMedicalService : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<input id=""pac-input""
       class=""controls""
       type=""text""
       placeholder=""Search Box"" />
<div id=""map""></div>

<!-- Async script executes immediately and must be after any DOM elements used in callback. -->
<script src=""https://maps.googleapis.com/maps/api/js?key=AIzaSyBknDqVMV6zSUwigjuHAdcjIoOsOmqLMnQ&callback=initMap&libraries=places&v=weekly""
        async></script>
<script>
    let map;
    let latLng = { lat: 9.005401, lng: 38.763611 }
    function initMap() {
        map = new google.maps.Map(document.getElementById(""map""), {
            center: latLng,
            zoom: 13,
        });
        const input = document.getElementById(""pac-input"");
        const searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        // Bias the SearchBox results towards current map's viewport.
        map.addListener(""bounds_changed"", () => {
            searchBox.setBounds(map.getBounds());
        });
        ");
            WriteLiteral(@"let marker = new google.maps.Marker({
            position: latLng,
            map,
            title: ""Center!"",
        });
        marker.addListener(""click"", () => {
            map.setZoom(15);
            map.setCenter(marker.getPosition());
        });
        searchBox.addListener(""places_changed"", () => {
            const places = searchBox.getPlaces();
            console.log(places)
            if (places.length == 0) {
                return;
            }
            // Clear out the old markers.
            // markers.forEach((marker) => {
            //   marker.setMap(null);
            // });
            markers = [];
            // For each place, get the icon, name and location.
            const bounds = new google.maps.LatLngBounds();
            places.forEach((place) => {
                if (!place.geometry || !place.geometry.location) {
                    console.log(""Returned place contains no geometry"");
                    return;
                }
    ");
            WriteLiteral(@"            const icon = {
                    url: place.icon,
                    size: new google.maps.Size(101, 101),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25),
                };
                // Create a marker for each place.
                markers.push(
                    new google.maps.Marker({
                        position: place.geometry.location,
                        map,

                        title: place.name,

                    })
                );

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

    }</script>
<style>
    /* Always set the map");
            WriteLiteral(@" height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 100%;
        width:100%;
    }



    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
 ");
            WriteLiteral(@"           font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
